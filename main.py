
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import json
import os

TOKEN = os.getenv("TELEGRAM_TOKEN")

with open("produtos.json", "r") as f:
    produtos = json.load(f)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ö†Ô∏è Sem estorno\n‚ö†Ô∏è N√£o garantimos v√≠nculo, saldo ou aprova√ß√£o\n‚úÖ Garantia s√≥ de LIVE no teste\nüïê Troca s√≥ pelo bot, at√© 10min depois da compra\n‚ö†Ô∏è Compre se estiver de acordo com as regras!",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üõí LOJA | COMPRAR", callback_data="loja")],
            [InlineKeyboardButton("üíé MEU PERFIL", callback_data="perfil")]
        ])
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "loja":
        keyboard = []
        for p in produtos:
            keyboard.append([InlineKeyboardButton(f"{p['nome']} - R$ {p['revenda_valor']}", callback_data=f"produto_{p['nome']}")])
        await query.edit_message_text("üõçÔ∏è Escolha um produto:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data.startswith("produto_"):
        nome = query.data.replace("produto_", "")
        produto = next((x for x in produtos if x["nome"] == nome), None)
        if produto:
            context.user_data["produto"] = produto["nome"]
            await query.edit_message_text(
                f"üí≥ Produto: {produto['nome']}\nüí∞ Valor: R$ {produto['revenda_valor']}\n\nüîë Chave Pix: tesouraria@multinegociacoes.com\n\nAp√≥s pagar, clique no bot√£o abaixo para confirmar.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ J√° paguei", callback_data="confirmar_pagamento")]])
            )

    elif query.data == "confirmar_pagamento":
        produto = context.user_data.get("produto")
        # Utilize uma √∫nica string com \n para separar as linhas em vez de quebrar a
        # literal diretamente, evitando o erro de sintaxe por string sem
        # terminador. Esta mensagem informa ao usu√°rio que o pagamento est√°
        # sendo verificado e que a compra ser√° realizada no fornecedor.
        await query.edit_message_text(
            "‚è≥ Verificando pagamento...\nüîÅ Realizando a compra no fornecedor..."
        )

        # Importa a fun√ß√£o de compra do fornecedor e executa-a de forma
        # ass√≠ncrona. O resultado retornado ser√° o conte√∫do do gift card ou
        # produto.
        from telethon_bot import comprar_no_fornecedor
        resultado = await comprar_no_fornecedor(produto)

        # Envia ao usu√°rio a confirma√ß√£o de que a compra foi conclu√≠da e
        # apresenta o conte√∫do recebido do fornecedor. A quebra de linha
        # adicional acima do resultado melhora a legibilidade.
        await query.message.reply_text(
            f"‚úÖ Compra conclu√≠da!\nüßæ Conte√∫do: \n\n{resultado}"
        )

 app = ApplicationBuilder().token(TOKEN).build()
 app.add_handler(CommandHandler("start", start))
 app.add_handler(CallbackQueryHandler(handle_callback))
-# rodar o bot
-app.run_polling()
+# rodar o bot, descartando qualquer update pendente
+app.run_polling(drop_pending_updates=True)
